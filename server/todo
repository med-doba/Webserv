

sometimes accept fails and the program exits find out why it fails
fix if a client disconnect in the recv and the index gets checked for pollout


fix get method with body should return a bad request
if a request get sent with a get method and has transfer-encoding or Content-Length or Content-Type
should return bad request
it's okay with Content-Length aslong as the value is zero




to handle errors in the request create a response class that 
a status code and phrase that explaines the error and function
that generate the request depending on the status code and the phrase 
this way it becomes easier and more portable solution the errors
handling i should incoprate this in the normal response as well



=> handle if a header doesn't have a value only if that header is nessecary
to the request method (pending ...) (mustapha will do it)

=> if a bind fails do not exist just thorw error and continue (pending ...)

=> handle chanked transfer if size of buffer bigger than the contentlength in the headers (done)

=> handle delete required headers (done)

=> handle boundary contentLength == 0 (done)

=> extension random generation doesn't work test case : run server then send a file then rerun server and notice the file doesn't get created (pending ...)

=> check if no /r is found when looking for the chunked encoding (pending ...)

=>	415 Unsupported Media Type
This response means that the server was unable to process the request because the content type
specified in the Content-Type header is not supported by the server.  (done)

=> handle that it goes into nonchunked when it's a delete method (done)

=> ask mustapha if he handled nothing but space between the elements of the request line (done)

=> handle if the URI has any spaces (pending ...)

=> server hangs when contentLength is bigger the actual body (pending ...)

=> doba segv no listen found (done)

=> create a map with key is the status code and the value is the phrase-line (pending ...)

=> do all the MIME-Types (pending ...)

=> infinite rederict 
example :
location /redir {
  return 301 /redir;
}

=> implement the range header in the response plus rather than the whole file only read as much as you're gonna send (pending ...)

   The Location response-header field is used to redirect the recipient
   to a location other than the Request-URI for completion of the
   request or identification of a new resource. For 201 (Created)
   responses, the Location is that of the new resource which was created
   by the request. For 3xx responses, the location SHOULD indicate the
   server's preferred URI for automatic redirection to the resource. The
   field value consists of a single absolute URI.


POST:
       Location       = "Location" ":" absoluteURI

   An example is:

       Location: http://www.w3.org/pub/WWW/People.html

      Note: The Content-Location header field (section 14.14) differs
      from Location in that the Content-Location identifies the original
      location of the entity enclosed in the request. It is therefore
      possible for a response to contain header fields for both Location
      and Content-Location. Also see section 13.10 for cache
      requirements of some methods.


   If a resource has been created on the origin server, the response
   SHOULD be 201 (Created) and contain an entity which describes the
   status of the request and refers to the new resource, and a Location
   header (see section 14.30).

   The action performed by the POST method might not result in a
   resource that can be identified by a URI. In this case, either 200
   (OK) or 204 (No Content) is the appropriate response status,
   depending on whether or not the response includes an entity that
   describes the result.












DELETE :
   A successful response SHOULD be 200 (OK) if the response includes an
   entity describing the status, 202 (Accepted) if the action has not
   yet been enacted, or 204 (No Content) if the action has been enacted
   but the response does not include an entity.





















Sure, here are some headers that should not be included in certain HTTP methods:

Content-Length: This header should not be included in GET requests, as GET requests do not have a request body. If a GET request includes a Content-Length header, you should respond with a "400 Bad Request" error.

Transfer-Encoding: This header should not be included in GET requests, as GET requests do not have a request body. If a GET request includes a Transfer-Encoding header, you should respond with a "400 Bad Request" error.

Host: This header is required for all HTTP requests, so if it is not included in the request, you should respond with a "400 Bad Request" error.

Content-Type: This header should be included in POST requests, as the request body may contain data in various formats. If this header is not included in a POST request, you should respond with a "400 Bad Request" error.

Authorization: This header should be included in requests that require authentication. If it is not included and authentication is required, you should respond with a "401 Unauthorized" error.

Range: This header should not be included in POST or DELETE requests, as those methods do not retrieve partial content of a resource. If it is included in a POST or DELETE request, you should respond with a "400 Bad Request" error.
If-Modified-Since: This header should not be included in POST or DELETE requests, as those methods do not modify resources based on a specific timestamp. If it is included in a POST or DELETE request, you should respond with a "400 Bad Request" error.


Note that these are just some examples, and the exact headers that are allowed or disallowed for a particular HTTP method may vary depending on the server implementation or specific use case.






Here are some of the necessary headers and behaviors for the three HTTP methods GET, POST, and DELETE:

GET method

Required headers: Host
Optional headers: If-Modified-Since, If-Unmodified-Since, If-None-Match, If-Match, Range
Response for missing Host: 400 Bad Request
POST method

Required headers: Host, Content-Type, Content-Length
Optional headers: If-Modified-Since, If-Unmodified-Since, If-None-Match, If-Match
Response for missing Host: 400 Bad Request
Response for missing Content-Type: 400 Bad Request
Response for missing Content-Length: 411 Length Required
DELETE method

Required headers: Host
Optional headers: If-Match, If-Unmodified-Since
Response for missing Host: 400 Bad Request
Note that there may be additional headers required or optional for specific use cases, but these are some of the most common ones.

For missing required headers, the server should respond with a 400 Bad Request status code. For optional headers, the server should still process the request even if the header is missing.

















Prototype of a response

std::string request(buffer, bytes);

Parse request
std::istringstream request_stream(request);
std::string method, uri, version;
request_stream >> method >> uri >> version;
//std::cout << request << std::endl;
//std::cout << "method " << method << " uri " << uri << " ver " << version << std::endl;
// Construct response
std::string response_body = "Hello, World! how are you doing haitam?\n";
std::ostringstream response_stream;
response_stream << "HTTP/1.1 200 OK\r\n"
			<< "Content-Type: text/plain\r\n"
			<< "Content-Length: " << response_body.size() << "\r\n"
			<< "\r\n"
			<< response_body;

std::string response = response_stream.str();

// Send response to client
send(pfds_raw[i].fd, response.c_str(), response.size(), 0);


how to make a socket non-blocking "fcntl(sockfd, F_SETFL, O_NONBLOCK);"



Request-Line   = Method SP Request-URI SP HTTP-Version CRLF


The Method  token indicates the method to be performed on the
resource identified by the Request-URI. The method is case-sensitive.

	Method         = "OPTIONS"                ; Section 9.2
					| "GET"                    ; Section 9.3
					| "HEAD"                   ; Section 9.4
					| "POST"                   ; Section 9.5
					| "PUT"                    ; Section 9.6
					| "DELETE"                 ; Section 9.7
					| "TRACE"                  ; Section 9.8
					| "CONNECT"                ; Section 9.9
					| extension-method
	extension-method = token

	   The list of methods allowed by a resource can be specified in an
   Allow header field (section 14.7). The return code of the response
   always notifies the client whether a method is currently allowed on a
   resource, since the set of allowed methods can change dynamically. An
   origin server SHOULD return the status code 405 (Method Not Allowed)
   if the method is known by the origin server but not allowed for the
   requested resource, and 501 (Not Implemented) if the method is
   unrecognized or not implemented by the origin server. The methods GET
   and HEAD MUST be supported by all general-purpose servers. All other
   methods are OPTIONAL; however, if the above methods are implemented,
   they MUST be implemented with the same semantics as those specified
   in section 9.

   page 34 request


response syntax
       Response      = Status-Line               ; Section 6.1
                       *(( general-header        ; Section 4.5
                        | response-header        ; Section 6.2
                        | entity-header ) CRLF)  ; Section 7.1
                       CRLF
                       [ message-body ]          ; Section 7.2


   The first line of a Response message is the Status-Line, consisting
   of the protocol version followed by a numeric status code and its
   associated textual phrase, with each element separated by SP
   characters. No CR or LF is allowed except in the final CRLF sequence.

       Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

status-code 

      - 1xx: Informational - Request received, continuing process

      - 2xx: Success - The action was successfully received,
        understood, and accepted

      - 3xx: Redirection - Further action must be taken in order to
        complete the request

      - 4xx: Client Error - The request contains bad syntax or cannot
        be fulfilled

      - 5xx: Server Error - The server failed to fulfill an apparently
        valid request

doesnt work with char
application/pdf
video/mp4

works with char 
image/png
text/plain
text/html


 [EMSGSIZE] this error occurs when the data cant be sent through one single packet
 so it needs to be split to multiple smaller parts 
