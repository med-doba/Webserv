

sometimes accept fails and the program exits find out why it fails






Prototype of a response

std::string request(buffer, bytes);

Parse request
std::istringstream request_stream(request);
std::string method, uri, version;
request_stream >> method >> uri >> version;
std::cout << request << std::endl;
std::cout << "method " << method << " uri " << uri << " ver " << version << std::endl;
// Construct response
std::string response_body = "Hello, World! how are you doing haitam?\n";
std::ostringstream response_stream;
response_stream << "HTTP/1.1 200 OK\r\n"
			<< "Content-Type: text/plain\r\n"
			<< "Content-Length: " << response_body.size() << "\r\n"
			<< "\r\n"
			<< response_body;

std::string response = response_stream.str();

// Send response to client
send(pfds_raw[i].fd, response.c_str(), response.size(), 0);


how to make a socket non-blocking "fcntl(sockfd, F_SETFL, O_NONBLOCK);"



Request-Line   = Method SP Request-URI SP HTTP-Version CRLF


The Method  token indicates the method to be performed on the
resource identified by the Request-URI. The method is case-sensitive.

	Method         = "OPTIONS"                ; Section 9.2
					| "GET"                    ; Section 9.3
					| "HEAD"                   ; Section 9.4
					| "POST"                   ; Section 9.5
					| "PUT"                    ; Section 9.6
					| "DELETE"                 ; Section 9.7
					| "TRACE"                  ; Section 9.8
					| "CONNECT"                ; Section 9.9
					| extension-method
	extension-method = token

	   The list of methods allowed by a resource can be specified in an
   Allow header field (section 14.7). The return code of the response
   always notifies the client whether a method is currently allowed on a
   resource, since the set of allowed methods can change dynamically. An
   origin server SHOULD return the status code 405 (Method Not Allowed)
   if the method is known by the origin server but not allowed for the
   requested resource, and 501 (Not Implemented) if the method is
   unrecognized or not implemented by the origin server. The methods GET
   and HEAD MUST be supported by all general-purpose servers. All other
   methods are OPTIONAL; however, if the above methods are implemented,
   they MUST be implemented with the same semantics as those specified
   in section 9.

   page 34 request


response syntax
       Response      = Status-Line               ; Section 6.1
                       *(( general-header        ; Section 4.5
                        | response-header        ; Section 6.2
                        | entity-header ) CRLF)  ; Section 7.1
                       CRLF
                       [ message-body ]          ; Section 7.2


   The first line of a Response message is the Status-Line, consisting
   of the protocol version followed by a numeric status code and its
   associated textual phrase, with each element separated by SP
   characters. No CR or LF is allowed except in the final CRLF sequence.

       Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

status-code 

      - 1xx: Informational - Request received, continuing process

      - 2xx: Success - The action was successfully received,
        understood, and accepted

      - 3xx: Redirection - Further action must be taken in order to
        complete the request

      - 4xx: Client Error - The request contains bad syntax or cannot
        be fulfilled

      - 5xx: Server Error - The server failed to fulfill an apparently
        valid request

doesnt work with char
application/pdf
video/mp4

works with char 
image/png
text/plain
text/html


 [EMSGSIZE] this error occurs when the data cant be sent through one single packet
 so it needs to be split to multiple smaller parts 
